{"version":3,"sources":["components/utils/fetchUserData.js","components/app/App.tsx","serviceWorker.js","index.js"],"names":["fetchStock","a","async","setStockData","setLoading","setError","stockSymbol","API_Call","fetch","then","res","json","catch","err","App","useState","error","loading","active","dateString","modal","setModal","stockData","dailyStock","setStockSymbol","inputString","setInputString","setActiveClick","vooStockData","setVOOStockData","vtiStockData","setVTIStockData","vtStockData","setVTStockData","lastRefreshedDate","setLastRefreshedDate","todaysDate","Date","console","log","getFullYear","getMonth","getDate","useEffect","refreshing","stockVOODetails","stockVTDetails","fetchingNow","thisSymbol","setFunction","stockArray","API_Call_Variable","data","key","push","length","stockVTIDetails","fetchForBatch","className","type","name","id","onChange","e","currentTarget","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9dddcbd7.chunk.js","sourcesContent":["// import { sym } from 'enzyme/src/Utils';\n\nexport async function fetchStock({\n  setStockData,\n  setLoading,\n  setError,\n  stockSymbol,\n}) {\n  const API_KEY = '9M0U2R0U59ETQDXY';\n  let StockSymbol = stockSymbol ? stockSymbol : 'VTI';\n  let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n  fetch(API_Call)\n    .then(function(res) {\n      return res.json();\n    })\n    .then((res) => setStockData(res))\n    .then(setLoading(false))\n    .catch((err) => setError(err));\n}\n\nexport async function fetchForBatch({\n  setLoading,\n  setError,\n  setVOOStockData,\n  setVTIStockData,\n  setVTStockData,\n  stockSymbol,\n  setStockData,\n  setLastRefreshedDate,\n}) {\n  const API_KEY = '9M0U2R0U59ETQDXY';\n  let vooStockData = 'VOO';\n  let vtiStockData = 'VTI';\n  let vtStockData = 'VT';\n  // let specialStockSymbol = stockSymbol ? stockSymbol : 'VTI';\n  // let API_Call_VOO = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${vooStockData}&outputsize=compact&apikey=${API_KEY}`;\n  // let API_Call_VTI = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${vtiStockData}&outputsize=compact&apikey=${API_KEY}`;\n  // let API_Call_VT = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${vtStockData}&outputsize=compact&apikey=${API_KEY}`;\n  // let API_Call_Stock_Custom = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${specialStockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n  // https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=VTI&outputsize=compact&apikey=9M0U2R0U59ETQDXY\n\n  let stockVOODetails = [];\n  let stockVTIDetails = [];\n  let stockVTDetails = [];\n  // let stockSpecialDetails = [];\n\n  const fetchingNow = (thisSymbol, setFunction, stockArray) => {\n    // stockOneDetails.length = 0;\n    let API_Call_Variable = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${thisSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    fetch(API_Call_Variable)\n      .then(function(res) {\n        return res.json();\n      })\n      .then(function(data) {\n        for (var key in data['Time Series (Daily)']) {\n          stockArray.push(data['Time Series (Daily)'][key]['1. open']);\n        }\n        setLastRefreshedDate(data['Meta Data']['3. Last Refreshed']);\n      })\n\n      .then(setFunction(stockArray))\n      .then(setLoading(false))\n      .catch((err) => setError(err) && (stockArray.length = 0));\n  };\n  fetchingNow(vtiStockData, setVTIStockData, stockVTIDetails);\n  console.log({ stockVTIDetails });\n  fetchingNow(vooStockData, setVOOStockData, stockVOODetails);\n  console.log({ stockVOODetails });\n  fetchingNow(vtStockData, setVTStockData, stockVTDetails);\n  console.log({ stockVTDetails });\n  // fetchingNow(specialStockSymbol, setStockData, stockSpecialDetails);\n  // console.log({stockSpecialDetails});\n}\n\nexport async function fetchingEachNow({\n  thisSymbol,\n  setFunction,\n  setLoading,\n  setError,\n}) {\n  const API_KEY = '9M0U2R0U59ETQDXY';\n  let setLastRefreshedDate;\n  let stockArray = [];\n  // stockOneDetails.length = 0;\n  let API_Call_Variable_2 = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${thisSymbol}&outputsize=compact&apikey=${API_KEY}`;\n  fetch(API_Call_Variable_2)\n    .then(function(res) {\n      return res.json();\n    })\n    .then(function(data) {\n      for (var key in data['Time Series (Daily)']) {\n        stockArray.push(data['Time Series (Daily)'][key]['1. open']);\n      }\n      setLastRefreshedDate(data['Meta Data']['3. Last Refreshed']);\n    })\n\n    .then(setFunction(stockArray))\n    .then(setLoading(false))\n    .catch((err) => setError(err) && (stockArray.length = 0));\n}\n\n//     fetch(API_Call_VTI)\n//         .then(function (res) {\n//             return res.json();\n//         })\n//         .then(function (data) {\n//             for (var key in data['Time Series (Daily)']) {\n//                 stockOneDetails.push(data['Time Series (Daily)'][key]['1. open']);\n//             }\n//             setLastRefreshedDate(data['Meta Data']['3. Last Refreshed']);\n//         })\n//\n//         .then(setVTIStockData(stockOneDetails))\n//         .then(setLoading(false))\n//         .catch((err) => setError(err) && (stockOneDetails.length = 0));\n//\n//     fetch(API_Call_VOO)\n//         .then(function (res) {\n//             return res.json();\n//         })\n//         .then(function (data) {\n//             for (var key in data['Time Series (Daily)']) {\n//                 stockOneDetails.push(data['Time Series (Daily)'][key]['1. open']);\n//             }\n//         })\n//\n//         .then(setVOOStockData(stockOneDetails))\n//         .then(setLoading(false))\n//         .catch((err) => setError(err) && (stockOneDetails.length = 0));\n// }\n//  fetch(API_Call_VOO)\n//      .then(\n//          function(res){\n//              return res.json();\n//          }\n//      )\n//      .then (function(data){\n//          for (var key in data['Time Series (Daily)']){\n//              stockOneDetails.push(data['Time Series (Daily)'][key]['1. open']);\n//          }\n//      })\n//\n//\n//      .then(setVOOStockData(stockOneDetails))\n//      .then(setLoading(false))\n//      .catch((err)=>setError(err));\n// }\n\n// Response {type: \"cors\", url: \"https://www.alphavantage.co/query?function=TIME_SE…ol=VTI&outputsize=compact&apikey=9M0U2R0U59ETQDXY\", redirected: false, status: 200, ok: true, …}\n// type: \"cors\"\n// url: \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=VTI&outputsize=compact&apikey=9M0U2R0U59ETQDXY\"\n// redirected: false\n// status: 200\n// ok: true\n// statusText: \"OK\"\n// headers: Headers {}\n// body: (...)\n// bodyUsed: false\n// __proto__: Response\n\nexport default fetchStock;\n","import React, { useState, useEffect } from 'react';\nimport './../styling/App.scss';\nimport {\n  fetchStock,\n  fetchForBatch,\n  fetchingEachNow,\n} from './../utils/fetchUserData';\nimport './../styling/Card.scss';\n// import StockCard from './StockCard';\n\n// const timeSeries = 'Time Series (Daily)';\nconst openPriceString: string = '1. open';\n// const highPriceString: string = '2. high';\n\nconst App = () => {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [modal, setModal] = useState({ active: false, dateString: '' });\n\n  const [stockData, setStockData] = useState(); //full API response\n  const [dailyStock, setDailyStock] = useState(); //filtered to Time Series Response\n\n  // const [dateStocks, setDateStocks] = useState(); // Array of dates\n  const [stockSymbol, setStockSymbol] = useState('SPTM');\n  const [inputString, setInputString] = useState();\n  const [activeClick, setActiveClick] = useState();\n\n  const [vooStockData, setVOOStockData] = useState(); //VOO open prices\n  const [vtiStockData, setVTIStockData] = useState(); //VTI open prices\n  const [vtStockData, setVTStockData] = useState(); //VT open price\n\n  const [lastRefreshedDate, setLastRefreshedDate] = useState();\n\n  const todaysDate = new Date();\n  console.log({ stockData });\n\n  const todaysDateString = `${todaysDate.getFullYear()}-0${todaysDate.getMonth() +\n    1}-${todaysDate.getDate()}`;\n\n  useEffect(() => {\n    setLoading(true);\n    fetchStock({ setStockData, setLoading, setError, stockSymbol });\n  }, [stockSymbol]);\n\n  // useEffect(() => {\n  //   setLoading(true);\n  //   fetchStock({ setStockData, setLoading, setError, stockSymbol });\n  // }, [activeClick]);\n\n  useEffect(() => {\n    setLoading(true);\n    refreshing();\n  }, []);\n\n  const refreshing = () => {\n    fetchForBatch({\n      setLoading,\n      setError,\n      setVOOStockData,\n      setVTIStockData,\n      setVTStockData,\n      stockSymbol,\n      setStockData,\n      setLastRefreshedDate,\n    });\n  };\n\n  const clickFetch = (fetchSymbol: string) => {\n    // console.log('hi');\n    //\n    // let result = fetchSymbol;\n    // let symbolTest = 'VTI';\n    // console.log({ fetchSymbol });\n    // fetchStock({ setStockData, setLoading, setError, fetchSymbol });\n    // // fetchingEachNow({symbolTest, setVTIStockData, setLoading, setError})\n  };\n\n  const buttonHandler = () => {\n    inputString ? setStockSymbol(inputString) : setStockSymbol('VT');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <label>Stock Checker</label>\n      </header>\n      {error ? <div>Whoops my bad</div> : <></>}\n      {loading ? (\n        <div>Loading, Please wait</div>\n      ) : (\n        <main>\n          <div className=\"card-individual\">\n            <form>\n              <label>\n                Stock Symbol:\n                <input\n                  type=\"text\"\n                  name=\"stockSymbol\"\n                  id=\"stockSymbol\"\n                  onChange={(e) => setInputString(e.currentTarget.value)}\n                />\n              </label>\n            </form>\n            <button onClick={buttonHandler}>Change</button>\n          </div>\n          <div className=\"card-individual\">\n            <button onClick={() => refreshing()}>Refresh </button>\n            <button onClick={() => setActiveClick(true)}>Fetch Again</button>\n          </div>\n\n          <div className=\"stock-section\">\n            {vooStockData && (\n              <div className=\"card-individual\">\n                <h1>VOO</h1>\n                {vooStockData.length > 1 ? (\n                  <div>\n                    <h2>Open Price:{vooStockData[0]}</h2>\n                    <span>Date: {lastRefreshedDate} </span>\n                  </div>\n                ) : (\n                  <div>\n                    <h2>Loading</h2>\n                    {/*<button onClick={() => clickFetch('VOO')}>Fetch</button>*/}\n                    {/*<button onClick={()=> setActiveClick(true)}>Fetch Again</button>*/}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {vtiStockData && (\n              <div className=\"card-individual\">\n                <h1>VTI</h1>\n                {vtiStockData.length > 1 ? (\n                  <div>\n                    <h2>Open Price:{vtiStockData[0]}</h2>\n                    <span>Date: {lastRefreshedDate} </span>\n                  </div>\n                ) : (\n                  <div>\n                    <h2>Loading</h2>\n                    {/*<button onClick={() => clickFetch('VTI')}>Fetch</button>*/}\n                    {/*<button onClick={()=> setActiveClick(true)}>Fetch Again</button>*/}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {vtStockData && (\n              <div className=\"card-individual\">\n                <h1>VT</h1>\n                {vtStockData.length > 1 ? (\n                  <div>\n                    <h2>Open Price:{vtStockData[0]}</h2>\n                    <span>Date: {lastRefreshedDate} </span>\n                  </div>\n                ) : (\n                  <div>\n                    <h2>Loading</h2>\n                    {/*<button onClick={() => clickFetch('VT')}>Fetch</button>*/}\n                    {/*<button onClick={()=> setActiveClick(true)}>Fetch Again</button>*/}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {stockData && (\n              <div className=\"card-individual\">\n                <h1>{stockSymbol}</h1>\n                {stockData.length > 1 ? (\n                  <div>\n                    <h2>Open Price:{stockData[0]}</h2>\n                    <span>Date: {lastRefreshedDate} </span>\n                  </div>\n                ) : (\n                  <div>\n                    <h2>Loading</h2>\n                    {/*<button onClick={() => clickFetch('VT')}>Fetch</button>*/}\n                    {/*<button onClick={()=> setActiveClick(true)}>Fetch Again</button>*/}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/*<StockCard*/}\n          {/*  stockSymbol={stockSymbol}*/}\n          {/*  dateStocks={dateStocks}*/}\n          {/*  dailyStock={dailyStock}*/}\n          {/*  setModal={setModal}*/}\n          {/*  modal={modal}*/}\n          {/*  dailyOpenData={dailyOpenData}*/}\n          {/*/>*/}\n\n          {/*{dateStocks && (*/}\n          {/*  <div className=\"stock-section\">*/}\n          {/*    {dateStocks.map((date: string, index: number) => (*/}\n          {/*      <div key={index} className=\"card-individual\">*/}\n          {/*        <h1>{stockSymbol}</h1>*/}\n          {/*        <h2>Date:</h2>*/}\n          {/*        <p>{date}</p>*/}\n          {/*        <h2>Open Price:</h2>*/}\n          {/*        <p>{dailyStock[date][openPriceString]}</p>*/}\n          {/*        <h2>High Price:</h2>*/}\n          {/*        <p>{dailyStock[date][highPriceString]}</p>*/}\n          {/*      </div>*/}\n          {/*    ))}*/}\n          {/*  </div>*/}\n          {/*)}*/}\n\n          {modal.active && stockData && (\n            <div className=\"modal\">\n              <h2 className=\"modal-header\">\n                {stockSymbol} : {modal.dateString}\n                <button\n                  className=\"modal-close\"\n                  onClick={() =>\n                    setModal({ active: false, dateString: '2020-02-20' })\n                  }\n                >\n                  X\n                </button>\n              </h2>\n              <div className=\"modal-content\">\n                <ul>\n                  <li className=\"modal-details\">\n                    Open Value: {dailyStock[modal.dateString][openPriceString]}\n                  </li>\n                  <li className=\"modal-details\">\n                    High Value: {dailyStock[modal.dateString]['2. high']}\n                  </li>\n                  <li className=\"modal-details\">\n                    Low Value: {dailyStock[modal.dateString]['3. low']}\n                  </li>\n                  <li className=\"modal-details\">\n                    Close Value: {dailyStock[modal.dateString]['4. close']}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </main>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}