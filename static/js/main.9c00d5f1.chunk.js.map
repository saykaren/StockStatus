{"version":3,"sources":["components/utils/fetchUserData.js","components/app/App.tsx","serviceWorker.js","index.js"],"names":["fetchStock","a","async","setStockData","setLoading","setError","stockSymbol","API_Call","fetch","then","res","json","catch","err","App","useState","error","loading","active","dateString","modal","setModal","stockData","dailyStock","setStockSymbol","inputString","setInputString","VOOStockData","setVOOStockData","VTIStockData","setVTIStockData","VTStockData","setVTStockData","todaysDate","Date","getFullYear","getMonth","getDate","useEffect","refreshing","console","log","StockSymbol","stockOneDetails","fetchingNow","thisSymbol","setFunction","length","API_Call_Variable","data","key","push","fetchForBatch","className","type","name","id","onChange","e","currentTarget","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c00d5f1.chunk.js","sourcesContent":["import {sym} from \"enzyme/src/Utils\";\n\nexport async function fetchStock({ setStockData, setLoading, setError, stockSymbol }){\n  const API_KEY = '9M0U2R0U59ETQDXY';\n  let StockSymbol = stockSymbol ? stockSymbol : 'VTI';\n  let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    fetch(API_Call)\n        .then(\n            function(res){\n                return res.json();\n            }\n        )\n        .then((res)=>setStockData(res))\n        .then(setLoading(false))\n        .catch((err)=>setError(err));\n}\n\n\nexport async function fetchForBatch({ setLoading, setError, setVOOStockData, setVTIStockData, setVTStockData, stockSymbol, setStockData}){\n    console.log('here');\n    const API_KEY = '9M0U2R0U59ETQDXY';\n    let VOOStockData = \"VOO\";\n    let VTIStockData = \"VTI\";\n    let VTStockData = 'VT';\n    let StockSymbol = stockSymbol ? stockSymbol : 'VTI';\n    // let API_Call_VOO = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${VOOStockData}&outputsize=compact&apikey=${API_KEY}`;\n    // let API_Call_VTI = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${VTIStockData}&outputsize=compact&apikey=${API_KEY}`;\n    // let API_Call_VT = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${VTStockData}&outputsize=compact&apikey=${API_KEY}`;\n    // let API_Call_Stock_Custom = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n\n    let stockOneDetails = [];\n\n    const fetchingNow =(thisSymbol, setFunction)=>{\n        stockOneDetails.length=0;\n        let API_Call_Variable = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${thisSymbol}&outputsize=compact&apikey=${API_KEY}`;\n        fetch(API_Call_Variable)\n            .then(\n                function(res){\n                    return res.json();\n                }\n            )\n            .then (function(data){\n                for (var key in data['Time Series (Daily)']){\n                    stockOneDetails.push(data['Time Series (Daily)'][key]['1. open']);\n                }\n            })\n\n\n            .then(setFunction(stockOneDetails))\n            .then(setLoading(false))\n            .catch((err)=>setError(err));\n        }\n\n    fetchingNow(VOOStockData, setVOOStockData);\n    fetchingNow(VTIStockData, setVTIStockData);\n    fetchingNow(VTStockData, setVTStockData);\n    fetchingNow(StockSymbol, setStockData);\n    }\n\n\n   //  fetch(API_Call_VOO)\n   //      .then(\n   //          function(res){\n   //              return res.json();\n   //          }\n   //      )\n   //      .then (function(data){\n   //          for (var key in data['Time Series (Daily)']){\n   //              stockOneDetails.push(data['Time Series (Daily)'][key]['1. open']);\n   //          }\n   //      })\n   //\n   //\n   //      .then(setVOOStockData(stockOneDetails))\n   //      .then(setLoading(false))\n   //      .catch((err)=>setError(err));\n   // }\n\n// Response {type: \"cors\", url: \"https://www.alphavantage.co/query?function=TIME_SE…ol=VTI&outputsize=compact&apikey=9M0U2R0U59ETQDXY\", redirected: false, status: 200, ok: true, …}\n// type: \"cors\"\n// url: \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=VTI&outputsize=compact&apikey=9M0U2R0U59ETQDXY\"\n// redirected: false\n// status: 200\n// ok: true\n// statusText: \"OK\"\n// headers: Headers {}\n// body: (...)\n// bodyUsed: false\n// __proto__: Response\n\nexport default fetchStock;\n","import React, { useState, useEffect } from 'react';\nimport './../styling/App.scss';\nimport { fetchStock, fetchForBatch } from './../utils/fetchUserData';\nimport './../styling/Card.scss';\nimport StockCard from './StockCard';\n\nconst timeSeries = 'Time Series (Daily)';\nconst openPriceString: string = '1. open';\nconst highPriceString: string = '2. high';\n\nconst App = () => {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [modal, setModal] = useState({ active: false, dateString: '' });\n\n  const [stockData, setStockData] = useState(); //full API response\n  const [dailyStock, setDailyStock] = useState(); //filtered to Time Series Response\n\n  // const [dateStocks, setDateStocks] = useState(); // Array of dates\n  const [stockSymbol, setStockSymbol] = useState('VTI');\n  const [inputString, setInputString] = useState();\n\n  const [VOOStockData, setVOOStockData] = useState(); //VOO open prices\n  const [VTIStockData, setVTIStockData] = useState(); //VTI open prices\n  const [VTStockData, setVTStockData] = useState(); //VT open price\n\n  const todaysDate = new Date();\n\n  const todaysDateString = `${todaysDate.getFullYear()}-0${todaysDate.getMonth()+1}-${todaysDate.getDate()}`;\n\n  useEffect(() => {\n    setLoading(true);\n    fetchStock({ setStockData, setLoading, setError, stockSymbol });\n  }, [stockSymbol]);\n\n  useEffect(()=>{\n    setLoading(true);\n    refreshing();\n  }, []);\n\n  const refreshing = ()=>{\n    fetchForBatch({setLoading, setError, setVOOStockData, setVTIStockData, setVTStockData, stockSymbol, setStockData});\n  }\n\n  const buttonHandler = () => {\n    inputString ? setStockSymbol(inputString) : setStockSymbol('VT');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <label>Stock Checker</label>\n      </header>\n      {error ? <div>Whoops my bad</div> : <></>}\n      {loading ? (\n        <div>Loading, Please wait</div>\n      ) : (\n        <main>\n          <div className=\"card-individual\">\n            <form>\n              <label>\n                Stock Symbol:\n                <input\n                  type=\"text\"\n                  name=\"stockSymbol\"\n                  id=\"stockSymbol\"\n                  onChange={(e) => setInputString(e.currentTarget.value)}\n                />\n              </label>\n            </form>\n            <button onClick={buttonHandler}>Change</button>\n          </div>\n          <div className='card-individual'>\n            <button onClick={()=>refreshing()} >Refresh </button>\n          </div>\n\n          <div className='stock-section'>\n            {VOOStockData &&\n            (<div className='card-individual'>\n              <h1>VOO</h1>\n              {(VOOStockData.length>1) ?\n                  (<h2>Open Price:{VOOStockData[0]}</h2>) :\n                  <div>Loading</div>\n              }\n            </div>)\n            }\n\n            {VTIStockData &&\n            (<div className='card-individual'>\n              <h1>VTI</h1>\n              {(VTIStockData.length>1) ?\n                  (<h2>Open Price:{VTIStockData[0]}</h2>) :\n                  <div>Loading</div>\n              }\n            </div>)\n            }\n\n            {VTStockData &&\n            (<div className='card-individual'>\n              <h1>VT</h1>\n              {(VOOStockData.length>1) ?\n                  (<h2>Open Price:{VOOStockData[0]}</h2>) :\n                  <div>Loading</div>\n              }\n            </div>)\n            }\n          </div>\n\n\n          {/*<StockCard*/}\n          {/*  stockSymbol={stockSymbol}*/}\n          {/*  dateStocks={dateStocks}*/}\n          {/*  dailyStock={dailyStock}*/}\n          {/*  setModal={setModal}*/}\n          {/*  modal={modal}*/}\n          {/*  dailyOpenData={dailyOpenData}*/}\n          {/*/>*/}\n\n          {/*{dateStocks && (*/}\n          {/*  <div className=\"stock-section\">*/}\n          {/*    {dateStocks.map((date: string, index: number) => (*/}\n          {/*      <div key={index} className=\"card-individual\">*/}\n          {/*        <h1>{stockSymbol}</h1>*/}\n          {/*        <h2>Date:</h2>*/}\n          {/*        <p>{date}</p>*/}\n          {/*        <h2>Open Price:</h2>*/}\n          {/*        <p>{dailyStock[date][openPriceString]}</p>*/}\n          {/*        <h2>High Price:</h2>*/}\n          {/*        <p>{dailyStock[date][highPriceString]}</p>*/}\n          {/*      </div>*/}\n          {/*    ))}*/}\n          {/*  </div>*/}\n          {/*)}*/}\n\n          {modal.active && stockData && (\n            <div className=\"modal\">\n              <h2 className=\"modal-header\">\n                {stockSymbol} : {modal.dateString}\n                <button\n                  className=\"modal-close\"\n                  onClick={() =>\n                    setModal({ active: false, dateString: '2020-02-20' })\n                  }\n                >\n                  X\n                </button>\n              </h2>\n              <div className=\"modal-content\">\n                <ul>\n                  <li className=\"modal-details\">\n                    Open Value: {dailyStock[modal.dateString][openPriceString]}\n                  </li>\n                  <li className=\"modal-details\">\n                    High Value: {dailyStock[modal.dateString]['2. high']}\n                  </li>\n                  <li className=\"modal-details\">\n                    Low Value: {dailyStock[modal.dateString]['3. low']}\n                  </li>\n                  <li className=\"modal-details\">\n                    Close Value: {dailyStock[modal.dateString]['4. close']}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </main>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}